name: CI/CD Pipeline with DAST

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        python -m pytest

  dast:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Start the application
      env:
        FLASK_HOST: '0.0.0.0'
        FLASK_PORT: '5000'
        FLASK_DEBUG: 'False'
        DAST_SCAN: 'True'
      run: |
        python run.py &
        echo "Waiting for application to start..."
        for i in {1..60}; do
          if curl -s http://localhost:5000 > /dev/null; then
            echo "Application is running!"
            break
          fi
          echo "Waiting for application to start... attempt $i"
          sleep 2
          if [ $i -eq 60 ]; then
            echo "Application failed to start within timeout"
            exit 1
          fi
        done
        
    - name: Run OWASP ZAP DAST
      id: zap-scan
      run: |
        # Ensure zap-reports directory exists and is writable
        mkdir -p zap-reports
        chmod 777 zap-reports
        
        # Run ZAP scan with explicit report paths
        docker run --rm \
          -v "$(pwd)/zap-reports:/zap/wrk/:rw" \
          -v "$(pwd)/.zap/rules.tsv:/zap/rules.tsv:ro" \
          --network host \
          -t ghcr.io/zaproxy/zaproxy:stable \
          zap-baseline.py \
          -t http://localhost:5000 \
          -c /zap/rules.tsv \
          -J /zap/wrk/report.json \
          -w /zap/wrk/report.md \
          -r /zap/wrk/report.html \
          -a -I -j -d \
          -z "-config api.disablekey=true"
        
        ZAP_EXIT_CODE=$?
        if [ $ZAP_EXIT_CODE -eq 0 ] || [ $ZAP_EXIT_CODE -eq 2 ]; then
          echo "ZAP scan completed with exit code $ZAP_EXIT_CODE"
          # Verify reports exist
          if [ -f "zap-reports/report.html" ] && [ -f "zap-reports/report.md" ] && [ -f "zap-reports/report.json" ]; then
            echo "Reports generated successfully"
            ls -l zap-reports/
          else
            echo "Reports not found in zap-reports directory"
            ls -la zap-reports/
            exit 1
          fi
        else
          echo "ZAP scan failed with exit code $ZAP_EXIT_CODE"
          exit 1
        fi
        
    - name: Upload ZAP Reports
      uses: actions/upload-artifact@v4
      with:
        name: zap-reports
        path: zap-reports/
        if-no-files-found: warn

  deploy:
    needs: [test, dast]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # Add your deployment commands here