name: CI/CD Pipeline with DAST

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests with coverage
      run: |
        python -m pytest --cov=app --cov-report=xml:coverage.xml --junitxml=test-results.xml
        
    - name: Run pylint
      run: |
        pylint app tests > pylint-report.txt || true


  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Download SonarQube Scanner
        run: |
          wget https://github.com/SonarSource/sonar-scanner-cli/releases/download/4.10.0.2843/sonar-scanner-cli-4.10.0.2843-linux.zip
          unzip sonar-scanner-cli-4.10.0.2843-linux.zip
          sudo mv sonar-scanner-4.10.0.2843-linux /opt/sonar-scanner
      
      - name: Run SonarQube Scanner with Java 17
        shell: bash
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          JAVA_HOME: ${{ env.JAVA_HOME_17_X64 }}
        run: |
          # Modify sonar-scanner script to use Java 17
          sed -i '/#!\/bin\/sh/a export JAVA_HOME=${{ env.JAVA_HOME_17_X64 }}' /opt/sonar-scanner/bin/sonar-scanner
          
          # Display Java version to verify
          echo "Java version that will be used:"
          ${{ env.JAVA_HOME_17_X64 }}/bin/java -version
          
          # Run the scanner
          /opt/sonar-scanner/bin/sonar-scanner \
            -Dsonar.projectKey=security-implementation \
            -Dsonar.sources=app \
            -Dsonar.tests=tests \
            -Dsonar.python.coverage.reportPaths=coverage.xml \
            -Dsonar.python.xunit.reportPath=test-results.xml \
            -Dsonar.python.pylint.reportPath=pylint-report.txt \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.java.jdkHome=${{ env.JAVA_HOME_17_X64 }}

  dast:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Start the application
      env:
        FLASK_HOST: '0.0.0.0'
        FLASK_PORT: '5000'
        FLASK_DEBUG: 'False'
        DAST_SCAN: 'True'  # Enable DAST scanning mode
      run: |
        python run.py &
        echo "Waiting for application to start..."
        # Increase timeout and add better health check
        for i in {1..60}; do
          if curl -s http://localhost:5000 > /dev/null; then
            echo "Application is running!"
            break
          fi
          echo "Waiting for application to start... attempt $i"
          sleep 2
          if [ $i -eq 60 ]; then
            echo "Application failed to start within timeout"
            exit 1
          fi
        done
        
    - name: Prepare ZAP reports directory
      run: |
        # Create and set permissions for reports directory
        mkdir -p zap-reports
        chmod 777 zap-reports
        # Ensure the directory is empty
        rm -f zap-reports/*
        
    - name: Run OWASP ZAP DAST
      id: zap-scan
      run: |
        # Create ZAP config directory if it doesn't exist
        mkdir -p .zap
        
        # If rules.tsv doesn't exist, create a simple one
        if [ ! -f .zap/rules.tsv ]; then
          echo "Creating default rules.tsv file"
          echo "10016	IGNORE	.*" > .zap/rules.tsv
          echo "10020	IGNORE	.*" >> .zap/rules.tsv
        fi
        
        # Run ZAP scan with fixed configuration
        docker run --rm \
          -v "$(pwd)/zap-reports:/zap/wrk/:rw" \
          -v "$(pwd)/.zap/rules.tsv:/zap/rules.tsv:ro" \
          --network host \
          -t ghcr.io/zaproxy/zaproxy:stable \
          zap-baseline.py \
          -t http://localhost:5000 \
          -c /zap/rules.tsv \
          -J report.json \
          -w report.md \
          -r report.html \
          -a -I -j -d \
          -z "-config api.disablekey=true"
        
        ZAP_EXIT_CODE=$?
        echo "ZAP exit code: $ZAP_EXIT_CODE"
        
        # Accept exit codes 0 (success) and 2 (warnings found)
        if [ $ZAP_EXIT_CODE -eq 0 ] || [ $ZAP_EXIT_CODE -eq 2 ]; then
          echo "ZAP scan completed with exit code $ZAP_EXIT_CODE"
          # Verify reports were created
          if [ -f zap-reports/report.html ] && [ -f zap-reports/report.md ] && [ -f zap-reports/report.json ]; then
            echo "All report files were generated successfully"
            exit 0
          else
            echo "Some report files are missing:"
            ls -la zap-reports/
            exit 1
          fi
        else
          echo "ZAP scan failed with exit code $ZAP_EXIT_CODE"
          exit 1
        fi
        
    - name: Process and Display Scan Results
      run: |
        echo "=== ZAP Scan Summary ==="
        if [ -f zap-reports/report.md ]; then
          echo "Report found. Displaying summary:"
          # Extract and display the summary section
          awk '/^## Summary/,/^## /' zap-reports/report.md | head -n -1
          echo -e "\n=== Full Report Available ==="
          echo "The complete scan report is available in the workflow artifacts"
        else
          echo "No scan report was generated. Checking directory contents:"
          ls -la zap-reports/
          exit 1
        fi
        
    - name: Upload ZAP Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: zap-reports
        path: zap-reports/
        if-no-files-found: warn
        
    - name: Debug - Check application and container status
      if: always()
      run: |
        echo "=== Application Status ==="
        echo "Checking if application is still running..."
        curl -sv http://localhost:5000 || true
        echo "=== Network Status ==="
        netstat -tulpn | grep 5000 || true
        echo "=== Process Status ==="
        ps aux | grep python | grep -v grep || true
        echo "=== Directory Status ==="
        ls -la zap-reports/ || true

  deploy:
    needs: [test, dast]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # Add your deployment commands here