name: CI/CD Pipeline with DAST

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        python -m pytest

  dast:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Start the application
      env:
        FLASK_HOST: '0.0.0.0'
        FLASK_PORT: '5000'
        FLASK_DEBUG: 'False'
        DAST_SCAN: 'True'  # Enable DAST scanning mode
      run: |
        python run.py &
        echo "Waiting for application to start..."
        # Increase timeout and add better health check
        for i in {1..60}; do
          if curl -s http://localhost:5000 > /dev/null; then
            echo "Application is running!"
            exit 0
          fi
          echo "Waiting for application to start... attempt $i"
          sleep 2
        done
        echo "Application failed to start within timeout"
        exit 1
        
    - name: Run OWASP ZAP DAST
      id: zap-scan
      run: |
        # Create reports directory
        mkdir -p zap-reports
        
        # Run ZAP scan with basic configuration
        docker run --rm \
          -v $(pwd):/zap/wrk/:rw \
          -v $(pwd)/.zap/rules.tsv:/zap/rules.tsv:ro \
          --network host \
          -t ghcr.io/zaproxy/zaproxy:stable \
          zap-baseline.py \
          -t http://localhost:5000 \
          -c /zap/rules.tsv \
          -J zap-reports/report.json \
          -w zap-reports/report.md \
          -r zap-reports/report.html \
          -a -I -j -d -T 10 \
          -z "-config api.disablekey=true \
              -config database.recoverylog=false \
              -config spider.maxDuration=1 \
              -config spiderAjax.maxDuration=1 \
              -config passiveScan.maxDuration=10 \
              -config alertThreshold=HIGH \
              -config riskThreshold=HIGH"
        
        # Check if scan completed successfully
        if [ $? -eq 0 ]; then
          echo "ZAP scan completed successfully"
        else
          echo "ZAP scan completed with warnings"
        fi
        
    - name: Process and Display Scan Results
      run: |
        echo "=== ZAP Scan Summary ==="
        if [ -f zap-reports/report.md ]; then
          # Extract and display the summary section
          awk '/^## Summary/,/^## /' zap-reports/report.md | head -n -1
          echo -e "\n=== Full Report Available ==="
          echo "The complete scan report is available in the workflow artifacts"
        else
          echo "No scan report found"
          exit 1
        fi
        
    - name: Upload ZAP Reports
      uses: actions/upload-artifact@v4
      with:
        name: zap-reports
        path: zap-reports/
        if-no-files-found: error
        
    - name: Debug - Check application and container status
      run: |
        echo "=== Application Status ==="
        echo "Checking if application is still running..."
        curl -v http://localhost:5000 || true
        echo "=== Network Status ==="
        netstat -tulpn | grep 5000 || true
        echo "=== Process Status ==="
        ps aux | grep python || true
        echo "=== Docker Status ==="
        docker ps -a
        echo "=== Docker Logs ==="
        docker logs $(docker ps -a -q --filter ancestor=ghcr.io/zaproxy/zaproxy:stable) 2>&1 || true
        
    - name: Check if ZAP report exists
      run: |
        if [ ! -f zap-reports/report.html ]; then
          echo "ZAP report not found. Checking for alternative report..."
          if [ -f testreport.html ]; then
            mv testreport.html zap-reports/report.html
          else
            echo "No ZAP report found. This might indicate a scanning issue."
            exit 1
          fi
        fi

  deploy:
    needs: [test, dast]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # Add your deployment commands here 